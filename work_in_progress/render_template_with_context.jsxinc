#script "document format templatestrings"
#target "indesign"
#targetengine "session"
#include "../includes/index.jsxinc"

function renderTemplate(doc, context) {
  var changes = []
  var fn = function() {
    changeTemplateStrings(doc, context, changes)
  }
  app.scriptPreferences.enableRedraw = false
  app.doScript(
    fn,
    ScriptLanguage.JAVASCRIPT,
    [],
    UndoModes.FAST_ENTIRE_SCRIPT,
    'change template strings'
  )
  return filter(prop(2), changes)
}

function changeTemplateStrings(doc, data, changes) {
  resetSearch()
  var keys = findPlaceHolders(doc)
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i]
    app.findGrepPreferences.findWhat = '(?i)\\{\\{ *' + key + ' *\\}\\}'
    var value = dotProp(key)(data)
    if (value) {
      app.findGrepPreferences.findWhat = '(?i)\\{\\{ *' + key + ' *\\}\\}'
      app.changeGrepPreferences.changeTo = '' + value
      changes.push([key, value, len(doc.changeGrep())])
    } else {
      changes.push([key, null, len(doc.findGrep())])
    }
  }
  resetSearch()
}

function findPlaceHolders(doc) {
  app.findChangeGrepOptions.properties = {
    includeHiddenLayers: true,
    includeMasterPages: true
  }
  app.findGrepPreferences.properties = {
    findWhat: '\\{\\{[^{]*\\}\\}'
  }
  return pipe(
    call('findGrep'),
    map(
      pipe(
        prop('contents'),
        toLower,
        replace(/[}{ ]/g, '')
      )
    ),
    uniq
  )(doc)
}

function resetSearch() {
  app.changeGrepPreferences = NothingEnum.nothing
  app.findGrepPreferences = NothingEnum.nothing
  app.findChangeGrepOptions = NothingEnum.nothing
}

