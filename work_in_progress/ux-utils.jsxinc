#script "user interface helper functions"
#include "../includes/index.jsxinc"

//////////////////////////////
//  Reusable UI Components  //
//////////////////////////////

function scrollPanel(parent, maxHeight) {
  // Vertical scrollable scriptui panel
  var resourceString =
    "Group {\
    spacing: 0, margins: 0,\
    alignment: ['fill', 'fill'],\
    alignChildren: ['fill', 'fill'],\
    wrapper: Panel { properties: {borderStyle: 'thin'}, margins: 0,\
      content: Panel {\
        alignment: ['fill', 'top'], margins: 0, spacing: 0,\
        orientation: 'column', alignChildren: ['fill', 'top'] \
    }},\
    scrollbar: Scrollbar {\
      stepdelta: 1, jumpdelta: 1\
      maxvalue: 0, alignment: ['right', 'fill'], size: [15, -1],},\
  }"
  var panel = parent.add(resourceString)
  var content = panel.wrapper.content
  content.maximumSize.height = maxHeight || 500
  panel.scrollbar.onChanging = function scrollHandler() {
    content.bounds.top = -panel.scrollbar.value * panel.outerHeight
  }
  content.onDraw = function drawHandler() {
    var height = panel.size.height
    if (panel.outerHeight == height) return
    var first = content.children[0]
    var last = content.children[content.children.length - 1]
    panel.outerHeight = height
    panel.innerHeight = last.bounds.bottom - first.bounds.top
    if (panel.innerHeight > panel.outerHeight) {
      panel.scrollbar.maxvalue =
        (10 + panel.innerHeight - panel.outerHeight) / panel.outerHeight
      content.maximumSize.height = panel.innerHeight + 10
    } else {
      content.maximumSize.height = panel.outerHeight
      panel.scrollbar.maxvalue = 0
    }
  }
  return panel.wrapper.content
}

function dataTable(parent, data) {
  // display key-value pairs in a table
  for (var key in data) {
    var row = parent.add(
      "Group { \
      alignment: 'left', margins: 0, \
      alignChildren: ['left', 'fill'], \
      key: StaticText { text: 'key', preferredSize: [60, ''] }, \
      val: StaticText { text: 'val' }, \
    }"
    )
    uxStyle({ fg: 0.4 }, row.key)
    row.key.text = key + ':'
    row.val.text = data[key]
  }
}

/////////////////////////
//  Utility functions  //
/////////////////////////

var uxStyle = curry(function(style, element) {
  // set multiple ux properties on scriptui element
  //
  // usage example:
  // uxStyle({fg: '#fff', bg: '#222', font: 'dialog:15'})(win)
  //
  // color examples
  // white = "#FFF", "#FFFFFF", [1,1,1], 1
  // yellow = "#FF0", blue = "#00F", red = "#F00"
  //
  // font examples: ("dialog" is the default font)
  // "Arial-bold:24", "Times", "dialog:12", "dialog-bold"
  //
  // useful primer on scriptui fonts
  // http://www.indiscripts.com/post/2012/05/scriptui-fonts-facts

  var g = element.graphics
  if ('bg' in style)
    g.backgroundColor = g.newBrush(g.BrushType.SOLID_COLOR, uxColor(style.bg))
  if ('fg' in style)
    g.foregroundColor = g.newPen(g.PenType.SOLID_COLOR, uxColor(style.fg), 1)
  if ('font' in style) {
    try {
      g.font = style.font
      if (element.children) map(uxStyle({ font: style.font }))(element.children)
    } catch (e) {
      log(style.font + ' is not valid', $)
    }
  }
})

// convert hex color or single value to scriptui rgb color
// string | number | array -> [number, number, number]
var uxColor = cond([
  [is(Array), identity],
  [
    is(Number),
    function(n) {
      return [n, n, n]
    }
  ],
  [
    test(/^#?[0-9a-f]{6}$/),
    pipe(
      match(/[0-9a-f]{2}/g),
      map(flip(parseInt)(16)),
      map(mul(1 / 256))
    )
  ],
  [
    test(/^#?[0-9a-f]{3}$/),
    pipe(
      match(/[0-9a-f]{1}/g),
      map(flip(parseInt)(16)),
      map(mul(1 / 16))
    )
  ],
  [T, add(' is invalid color')]
])

if (ifMain($.fileName)) {
  // testing and develop
  if (typeof w != 'undefined') w.close()
  var w = new Window(
    'palette { title: "ux styles", preferredSize: [200, 200], location: [1200, 100] }'
  )

  map(
    function(style) {
      var g = w.add(
        'Group { margins: 10, st: StaticText { text: "hello world" }}'
      )
      uxStyle(style, g)
      g.st.text = uneval(style)
    },
    [
      { fg: '#ccf', bg: '#009' },
      { font: 'dialog:20' },
      { font: 'dialog-Bold' },
      { font: 'Consolas-italic:15', bg: 1 }
    ]
  )
  w.show()
}

// vi: ft=javascript
