// vim: set ft=javascript:

// Image -> Number
function getImageSize(image) {
  var bounds = image.parent.geometricBounds
  return (bounds[2] - bounds[0]) * (bounds[3] - bounds[1])
}

// Image | Story -> String
function getLabel(item, key) {
  var label, value, match
  if (item instanceof Image) item = item.parent
  if (item instanceof Story) item = item.textContainers[0]
  if (item instanceof String) label = item
  else label = item.label
  value = label.replace(/^ */, '').replace(/ *$/, '')
  if (key) {
    try {
      value = JSON.parse(value)[key]
    } catch (e) {
      match = value.match(RegExp(key + ':[ "]*([^ "]+)'))
      value = match && match[1]
    }
  }
  value = parseInt(value) || value
  return value
}

// (Image | Story, String | Object) -> void
function setLabel(item, label) {
  if (typeof label !== 'string') label = jsonify(label)
  if (item instanceof Story) item = item.textContainers[0]
  if (item instanceof Image) item = item.parent
  if ('label' in item) item.label = label
  else throw new Error('unknown type ' + typeof item)
}

// String -> String
function trim(str) {
  // trim whitespace from string
  return str.replace(/^\s*/, '').replace(/\s*$/, '')
}

// String -> String
function toUnicode(theString) {
  // lager unicode-entiteter av vanskelige bokstaver, tar en string og returnerer en string
  function charToUnicode(letter) {
    var charCode = ('0000' +
      letter
        .charCodeAt(0)
        .toString(16)
        .toUpperCase()
    ).substr(-4, 4)
    return '\\u' + charCode
  }
  var result = theString
  result = result.replace(/[\u0080-\uFFFF]/g, charToUnicode)
  result = result.replace(/\\u(201C|201D)/g, '\\u0022') // fikser feil unicode for fancy hermetegn
  result = result.replace(/\\u(2019|2018)/g, '\\u0092') // fikser feil unicode for apostrofer
  result = result.replace(/\\u2022/g, '\\u0095') // fikser feil unicode for bullet
  result = result.replace(/\\u2013/g, '\\u0096') // fikser feil unicode for tankestrek
  result = result.replace(/\\u2026/g, '...') // fikser ellipsis
  result = result.replace(/\+/g, '\\u002B') // fikser pluss
  result = result.replace(/\&/g, '\\u0026') // fikser &
  return result // String
}

// Object -> Object
function serializeObject(obj) {
  // make object serializable
  try {
    var pt = Object.prototype.toString.call(obj)
    switch (pt) {
      case '[object global]':
      case '[object String]':
      case '[object Number]':
      case '[object Boolean]':
        return obj
      case '[object Object]':
      case '[object Error]':
        var obj2 = {}
        for (var key in obj) obj2[key] = serializeObject(obj[key])
        return obj2
      case '[object Array]':
        var newarr = []
        for (var i = 0; i < obj.length; i++) newarr[i] = serializeObject(obj[i])
        return newarr
      case '[object Story]':
        return '[Story id:' + obj.id + ' ' + obj.contents.substr(0, 100) + ']'
      case '[object Image]':
        return '[Image id:' + obj.id + ' ' + obj.itemLink.name + ']'
      default:
        return pt
    }
  } catch(e) {
    return obj ? obj.toSource() : typeof obj
  }
}

// Object -> String
function jsonify(obj, indent) {
  indent = indent || config.DEBUG ? 2 : 0
  return JSON.stringify(serializeObject(obj), null, indent)
}

// (String | Object, ?String) -> void
function logToFile(message, filename) {
  // if (!config.DEBUG) return
  if (!filename) filename = 'default.log'
  var fp = File(config.logfiles + filename)
  fp.open('w')
  fp.encoding = 'UTF-8'
  fp.lineFeed = 'Unix'
  if (typeof message !== 'string') {
    message = jsonify(message, 2)
  }
  var successful = fp.write(message)
  fp.close()
  return successful
}

// log error object to file
function logError(error, data, logfile) {
  var time = new Date()
  var filename =
    logfile ||
    ('ERROR.' +
      error.fileName.replace(/.*SCRIPTS/, '') +
      '.' +
      time.toString().replace(/.GMT.*/, '')
    )
      .replace(/\W+/g, '-')
      .toLowerCase() + '.json'
  var msg = {
    message: error.message,
    line: error.line,
    file: error.fileName,
    time: time.toString(),
    data: data,
  }
  logToFile(jsonify(msg, 2), filename)
  return filename
}

// try to call function. Log errors to file
function tryLogErrors(fn, rethrow) {
  return function() {
    var args = arguments
    try {
      return fn.apply(null, args)
    } catch (error) {
      var data = { 'function': fn.name, arguments: args, stacktrace: $.stack }
      var filename = logError(error, data)
      alert(
        'Noe gikk galt med ' +
          error.fileName +
          '\n' +
          'Feilmeldingen blir lagret her: ' +
          filename,
        'Feil',
      )
      if (rethrow) throw error
    }
  }
}

// (String | Object, ?String) -> void
function log(message, filename) {
  // log to extendscript console
  if (filename) {
    logToFile(message, filename)
  }
  if (config.DEBUG)
    $.writeln(typeof message === 'string' ? message : jsonify(message))
  // else
  //   $.writeln('config.DEBUG = ' + config.DEBUG)
}

// Object -> [String]
function objectKeys(obj) {
  var result = []
  for (key in obj) {
    result.push(key)
  }
  return result
}

// Test runner
function testRunner() {
  config.DEBUG = true
  $.level = 2 // full debug mode
  for (name in $.global) {
    if (/test_/.test(name)) {
      fn = $.global[name]
      try {
        $.write('running tests:' + name)
        fn()
        $.write(' Ok\n')
      } catch (error) {
        log('\n' + error.fileName + ':' + error.line + '\n' + error.message)
      }
    }
  }
}

// Test assertions
function assert(bool, msg) {
  if (!bool) throw new Error('ASSERTION ERROR: ' + (msg || 'no message'))
}
