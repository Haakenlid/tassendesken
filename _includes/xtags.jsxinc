#include 'index.jsxinc'

config.DEBUG = true
$.strict = true

$.clear()
app.scriptPreferences.properties = {
  enableRedraw: false,
  userInteractionLevel: UserInteractionLevels.NEVER_INTERACT
}

pipe(
  prop('selection'),
  pluck('parentStory'),
  filter(),
  getXtags,
  log
)(app)

function findPosition(myStory) {
  var textContainer = myStory.textContainers[0]
  if (!textContainer.contents) return Infinity
  var firstchar = myStory.characters[0]
  var page = textContainer.parentPage
  var leftMargin = page.bounds[1] + page.marginPreferences.left
  var x = Math.round(firstchar.horizontalOffset)
  var y = Math.round(firstchar.baseline)
  var cols = pipe(
    dotProp('marginPreferences.columnsPositions'),
    map(add(leftMargin)),
    filter(lt(x))
  )(page)

  var pgNum = pipe(
    match(/\d+/),
    propOr(0, 0),
    parseInt
  )(page.name)

  var rv = Math.round(x + y * 10 + cols.length * 1e3, pgNum * 1e8)
  // log([x, y, rv, myStory])
  return rv
}

function getXtags(eksportStories) {
  return pipe(
    memoSort(findPosition, ascend),
    map(nestedStories),
    chain,
    uniq,
    map(storyToXtags),
    join('\r\r'),
    xtagsClean
    // xtagsReorder,
  )(eksportStories)
}

function nestedStories(story) {
  var cells = story.tables.everyItem().cells
  cellStories = cells.length
    ? cells
        .everyItem()
        .texts.everyItem()
        .getElements()
    : []
  return pipe(
    prop('allPageItems'),
    pluck('parentStory'),
    filter(identity),
    append(story),
    curry(concat)(cellStories)
    // uniq,
  )(story)
}

function chunkToXtags(chunk) {
  return test(/I/, chunk.appliedCharacterStyle.name)
    ? '_' + chunk.contents + '_'
    : chunk.contents
}

function clampRange(a, b, text) {
  var clamper = clamp(a, b)
  var range = [clamper(text.index), clamper(text.index + text.length - 1)]
  var rv = text.parent.characters.itemByRange(range[0], range[1])
  // if (rv.isValid != text.isValid) throw new Error('fail');
  return rv
}

function characterRanges(paragraph) {
  return pipe(
    prop('textStyleRanges'),
    map(
      curry(clampRange)(paragraph.index, paragraph.index + paragraph.length - 1)
    )
  )(paragraph)
}

function paragraphToXtags(paragraph) {
  var tag = tagForStyle(paragraph.appliedParagraphStyle.name)
  var text = pipe(
    ifElse(
      pipe(
        dotProp('textStyleRanges.length'),
        gt(1)
      ),
      pipe(
        characterRanges,
        map(chunkToXtags),
        join('')
      ),
      prop('contents')
    ),
    replace(/@/, '@')
  )(paragraph)
  // $.bp(test(/mai/, paragraph.contents))
  return '@' + tag + ': ' + text
}
function storyToXtags(story) {
  // Story -> str
  return pipe(
    prop('paragraphs'),
    map(paragraphToXtags),
    map(trim),
    join('\r')
  )(story)
}

// gjør diverse utskiftinger før saken sendes til prodsys
var xtagsClean = pipe(
  replace(/(\u2002|\u2003|\u2007|\u2009|\u202F|\u00A0)/g, ' '), // diverse space
  replace(/(\u2013|\u2014)/g, '--'), // gjør om tankestreker til to bindestreker
  replace(/\u00AD/g, '~'), // conditional hyphen (myk bindestrek) fjernes
  replace(/\uFFFC|\u0016/g, ''), // anchored object tegn fjernes
  replace(/@SLETT:[^\r]*/g, ''), //fjerner avsnitt med koden SLETT
  replace(/^@mt:/gm, '\r@mt:'), //ekstra avsnitt
  replace(/\n/g, ' '), // linjeskift blir erstattet med mellomrom
  replace(/^@[^:]+:\s*@/gm, '@'), // fjerne tomme avsnitt med xtag
  replace(/[ \t]+/g, ' '), // gjør multispace om til enkelspace.
  replace(/\r\r+/g, '\r\r'), // fjerner ekstra luft mellom avsnitt.
  trim
)

function tagForStyle(styleName) {
  return pipe(
    find(
      pipe(
        prop(0),
        function(fn) {
          return fn(styleName)
        }
      )
    ),
    prop(1)
  )([
    [test(/\btit\b/), 'tit'],
    [test(/\bmt\b/), 'mt'],
    [test(/\bbt\b/), 'bt'],
    [test(/\bbl\b/), 'bl'],
    [test(/\bingress\b/), 'ing'],
    [test(/\bstikktit\b/), 'stikktit'],
    [test(/\bsitat\b/), 'sitat'],
    [test(/\bsitatbyline\b/), 'sitatbyline'],
    [test(/\btema/), 'tema'],
    [test(/\bfakta/), 'fakta'],
    [test(/\bspørsmål/), 'spm'],
    [test(/\btingo/), 'tingo'],
    [test(/(epost)/), 'SLETT'],
    [T, 'txt']
  ])
}

// vi: ft=javascript
