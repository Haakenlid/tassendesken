// vim: set ft=javascript:
/* jshint ignore:start */
#include config.jsxinc
#include base64.jsxinc
#include json2.jsxinc
/* jshint ignore:end */

function log(message) {
  // log to extendscript console
  if (!config.DEBUG) return
  $.writeln(typeof message === 'string'
    ? message
    : JSON.stringify(message, null, 2)
  )
}

function importerSak(sak, artikkeltype) { // placeholder som skal erstattes med en annen funksjon i skriptet import.jsx
  try {
    var nysak = prodsys.get(sak.prodsak_id); // henter sak i prodsys
    log(sak.arbeidstittel + " " + artikkeltype.type); // skriver info til konsollen i EST
    var payload = {produsert: prodsys.gammelDeskStatus}
    prodsys.post(sak.prodsak_id, payload); // flytter saken til neste status i prodsys
  } catch (e) {
    log(e); // skriver feilmelding til konsollen
  }
}

var prodsys = { // Objekt om representerer produksjonssystemet på webserveren
  basicAuth: Base64.encode(config.api.USER+':'+config.api.PASSWORD),
  host: 'universitas.no',
  port: 80,
  apiPlassering: '/api/legacy/',
  uferdigStatus: 0,
  toJournalist: 3,
  toSubEditor: 4,
  toEditor: 5,
  tilDeskStatus: 6,
  gammelDeskStatus: 9,
  tilWebStatus: 10,
  slettStatus: 15,
};


prodsys.request = function(url, method, data){
  var connection = new Socket();
  connection.encoding = 'UTF-8';
  var api_url = url
    ? this.apiPlassering + url + '/'
    : this.apiPlassering + '?limit=50'

  var response;
  var httpRequest = "";

  // Setter sammen en httpRequest. Serveren er veldig streng på at det må være riktig formulert
  httpRequest += method + " " + api_url + " HTTP/1.0";
  httpRequest += "\rHost:" + this.host;

  if (data) {
    data = typeof data === 'string' ? data : JSON.stringify(data)
    // data = toUnicode(data);
    httpRequest += "\rContent-Type: application/x-www-form-urlencoded; charset=UTF-8";
    httpRequest += "\rContent-Length: " + data.length;
  }

  httpRequest += "\rAuthorization: Basic " + this.basicAuth;
  httpRequest += "\rConnection: close";
  httpRequest += "\r\r";

  if (data) {
    httpRequest += data;
    httpRequest += "\r\r";
  }

  log(api_url + "\n" + method + "\n" + data + "\n" + httpRequest);

  if (connection.open(this.host+':'+this.port)) { // koble til produksjonssystemet
    connection.write(httpRequest);
    var reply = connection.read(9999999); // Maks antall tegn som jeg forventer at JSON-objektet skal være.
    connection.close();
    var parts = reply.split('\n\n', 2)
    if (!/200 OK/.test(parts[0])) { // "200 OK" er http-kode for vellykket request
      return { error: 'wrong status', reply: reply };
    }
    try {
      return JSON.parse(trim(parts[1]))
    } catch (error) {
      return { error: error, tail: parts[1]};
    }
  }
};

function trim(str) {
  // trim whitespace from string
  return str.replace(/^\s*/, '').replace(/\s*$/, '')
}

prodsys.get = function(prodsak_id) { return  this.request(prodsak_id, "GET" , null); };
prodsys.patch = function(prodsak_id, data) { return this.request(prodsak_id, "PATCH", data); };
prodsys.post = function(prodsak_id, data) { return this.request(prodsak_id, "POST", data); };
prodsys.put = function(prodsak_id) { return this.request(prodsak_id, "PUT", {}); };

prodsys.bildepost = function(prodsak_id, prodbilde_id, data){
  data.prodbilde_id = prodbilde_id;
  payload = {bilete: [data]};
  return  this.post(prodsak_id, payload);
};


function toUnicode(theString) { // lager unicode-entiteter av vanskelige bokstaver, tar en string og returnerer en string
  var result = ''; // skal returneres
  for (var cha = 0; cha < theString.length; cha++) {
    var theUnicode = theString.charCodeAt(cha);
    if (theUnicode === 8211) { // tankestrek
      result += '--'; // prodsys regner to bindestreker som tankestrek - lettere for brukerne å skrive inn
    } else if (theUnicode < 32 || theUnicode > 127) { // tegn og bokstover som skal være så jævla spesielle som "æøå", norske hermetegn o.s.v
      result += "\\u" + ("0000" + theUnicode.toString(16).toUpperCase()).substr(-4, 4); // legger til den nye unicoden til strengen vår
    } else { // de vanligste tegnene (a-z, A-Z, tall og en del skilletegn)
      result += theString.charAt(cha); // legges bare til uten konvertering
    }
  }
  result = result.replace(/\\u(201C|201D)/g, "\\u0022"); // fikser feil unicode for fancy hermetegn
  result = result.replace(/\\u(2019|2018)/g, "\\u0092"); // fikser feil unicode for apostrofer
  result = result.replace(/\\u2022/g, "\\u0095"); // fikser feil unicode for bullet
  result = result.replace(/\\u2013/g, "\\u0096"); // fikser feil unicode for tankestrek
  result = result.replace(/\\u2026/g, "..."); // fikser ellipsis
  result = result.replace(/\+/g, "\\u002B"); // fikser pluss
  result = result.replace(/\&/g, "\\u0026"); // fikser &
  return result; // String
}
