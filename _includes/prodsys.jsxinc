// vim: set ft=javascript:
/* jshint ignore:start */
#include config.jsxinc
#include base64.jsxinc
#include json2.jsxinc
/* jshint ignore:end */




function serializeObject(obj) {
  // make object serializable
  var pt = Object.prototype.toString.call(obj);
  switch(pt) {
    case '[object String]':
    case '[object Number]':
      return obj
    case '[object Object]':
      var obj2 = {};
      for (var key in obj)
        obj2[key] = serializeObject(obj[key]);
      return obj2
    case '[object Array]':
      var newarr = [];
      for (var i = 0; i < obj.length; i++)
        newarr[i] = serializeObject(obj[i]);
      return newarr;
    case '[object Story]':
      return '[Story id:' + obj.id + ' ' + obj.contents.substr(0,100) + ']'
    case '[object Image]':
      return '[Image id:' + obj.id + ' ' + obj.itemLink.name + ']'
    default:
      return pt
  }
}

function jsonify(obj) {
  return JSON.stringify(
    serializeObject(obj),
    null,
    config.DEBUG ? 2 : 0
  )
}

function logToFile(message, filename) {
  if (!config.DEBUG) return
  if (!filename) filename='default.log';
  var fp = File(config.logfiles + filename);
  fp.open('w');
  fp.encoding='UTF-8';
  fp.lineFeed='Unix';
  if (typeof message !== 'string') {
    message = jsonify(message);
  }
  var successful = fp.write(message);
  fp.close();
  return successful;
}

function log(message) {
  // log to extendscript console
  if (!config.DEBUG) return
  $.writeln(typeof message === 'string' ? message : jsonify(message))
}

function importerSak(sak, artikkeltype) { // placeholder som skal erstattes med en annen funksjon i skriptet import.jsx
  try {
    var nysak = prodsys.get(sak.prodsak_id); // henter sak i prodsys
    var payload = {produsert: prodsys.gammelDeskStatus}
    prodsys.post(sak.prodsak_id, payload); // flytter saken til neste status i prodsys
  } catch (e) {
    log(e); // skriver feilmelding til konsollen
  }
}

var prodsys = { // Objekt om representerer produksjonssystemet på webserveren
  basicAuth: Base64.encode(config.api.USER+':'+config.api.PASSWORD),
  host: 'universitas.no',
  port: 80,
  apiPlassering: '/api/legacy/',
  uferdigStatus: 0,
  toJournalist: 3,
  toSubEditor: 4,
  toEditor: 5,
  tilDeskStatus: 6,
  gammelDeskStatus: 9,
  tilWebStatus: 10,
  slettStatus: 15,
};


prodsys.request = function(pk, method, data, attrs){
  var connection = new Socket();
  connection.encoding = 'utf8';
  var api_url = pk
    ? this.apiPlassering + pk + '/'
    : this.apiPlassering

  if (attrs) {
    var queryString = [];
    for (var key in attrs) {
      queryString.push(key + '=' + attrs[key]);
    }
    api_url += '?' + queryString.join('&');
  }

  var response;
  var httpRequest = "";

  // Setter sammen en httpRequest. Serveren er veldig streng på at det må være riktig formulert
  httpRequest += method + " " + api_url + " HTTP/1.1";
  httpRequest += "\rHost: " + this.host;

  if (data) {
    data = typeof data === 'string' ? data : jsonify(data);
    connection.encoding = 'utf-8';
    httpRequest += "\rContent-Type: application/x-www-form-urlencoded; charset=UTF-8";
    httpRequest += "\rContent-Length: " + data.length;
  }

  httpRequest += "\rAuthorization: Basic " + this.basicAuth;
  httpRequest += "\rAccept: application/json; indent=2";
  httpRequest += "\rConnection: close";

  httpRequest += "\r\r";

  if (data) {
    httpRequest += data;
    httpRequest += "\r\r";
  }

  log(httpRequest);

  if (config.DEBUG && method !== "GET") {
    log('debug cancel ' + method);
    return {}
  }

  if (connection.open(this.host+':'+this.port)) { // koble til produksjonssystemet
    connection.write(httpRequest);
    var data = connection.read(99999999);
    connection.close();
    var parts = data.split('\n\n', 2)

    var reply = {
      json: {},
      head: trim(parts[0]),
      body: parts[1] ? trim(parts[1]) : null
    }
    reply.status = parseInt(reply.head.match(/^HTTP\/... (\d+)/)[1]);
    log(reply.head);

    if (reply.body) {
      try {
        reply.json = JSON.parse(reply.body);
        // logToFile(reply.body, 'prodsysdata.json');
      } catch (error) {
        log('error: ' + error.message)
        // return this.request(pk, method, data, attrs);
        logToFile(reply.body, 'fail.json');
        reply.error = error;
      }
    }
    return reply
  }
};

function trim(str) {
  // trim whitespace from string
  return str.replace(/^\s*/, '').replace(/\s*$/, '')
}

prodsys.get = function(prodsak_id, attrs) { return  this.request(prodsak_id, "GET" , null, attrs); }
prodsys.patch = function(prodsak_id, data) { return this.request(prodsak_id, "PATCH", data); };
prodsys.post = function(prodsak_id, data) { return this.request(prodsak_id, "POST", data); };
prodsys.put = function(prodsak_id) { return this.request(prodsak_id, "PUT", {}); };


function toUnicode(theString) { // lager unicode-entiteter av vanskelige bokstaver, tar en string og returnerer en string
  function charToUnicode(letter) {
    var charCode = ('0000' + letter.charCodeAt(0).toString(16).toUpperCase()).substr(-4, 4);
    return '\\u' + charCode;
  }
  var result = theString;
  result = result.replace(/[\u0080-\uFFFF]/g , charToUnicode);
  result = result.replace(/\\u(201C|201D)/g, "\\u0022"); // fikser feil unicode for fancy hermetegn
  result = result.replace(/\\u(2019|2018)/g, "\\u0092"); // fikser feil unicode for apostrofer
  result = result.replace(/\\u2022/g, "\\u0095"); // fikser feil unicode for bullet
  result = result.replace(/\\u2013/g, "\\u0096"); // fikser feil unicode for tankestrek
  result = result.replace(/\\u2026/g, "..."); // fikser ellipsis
  result = result.replace(/\+/g, "\\u002B"); // fikser pluss
  result = result.replace(/\&/g, "\\u0026"); // fikser &
  return result; // String
}
