// vim: set ft=javascript:

function importerSak(sak, artikkeltype) {
  // placeholder som skal erstattes med en annen funksjon i skriptet import.jsx
  try {
    var nysak = prodsys.get(sak.pk) // henter sak i prodsys
    var payload = { produsert: prodsys.gammelDeskStatus }
    prodsys.post(sak.pk, payload) // flytter saken til neste status i prodsys
  } catch (e) {
    log(e) // skriver feilmelding til konsollen
  }
}

var prodsys = {}

var http = {}
http.use_mock = function() {
  return false
}
http.dummy_connect = function(request) {
  log('DUMMY REQUEST')
  log(request)
  return {
    status: 100,
    head: 'dummy header',
    body: '{"dummy": true}',
    request: request
  }
}
http.connect = function(request, encoding, host, port) {
  if (this.use_mock(request)) return this.dummy_connect(request)
  var hostString = host + ':' + port
  var socket = new Socket()
  socket.encoding = encoding || 'utf8'

  if (socket.open(hostString) === false)
    throw new Error('could not connect to ' + hostString)

  socket.write(request)
  var response = socket.read(99999999)
  socket.close()
  var status = response.match(/^HTTP\/... (\d+)/)[1]
  var parts = response.split('\n\n', 2)
  return {
    status: parseInt(status) || 0,
    head: parts[0] || '',
    body: parts[1] || '',
    request: request
  }
}

var prodsys = {}

prodsys.get = function(pk, attrs) {
  return this.request('GET', pk, null, attrs)
}
prodsys.put = function(pk, payload) {
  return this.request('PUT', pk, payload || {})
}
prodsys.patch = function(pk, payload) {
  return this.request('PATCH', pk, payload)
}
prodsys.delete = function(pk) {
  return this.request('DELETE', pk)
}
prodsys.post = function(payload) {
  return this.request('POST', null, payload)
}

prodsys.list = function(attrs) {
  if (attrs && attrs.status != undefined) {
    try {
      attrs.publication_status__in = attrs.status.join(',')
    } catch (e) {
      attrs.publication_status = attrs.status
    }
    delete attrs.status
  }
  return this.request('GET', null, null, attrs)
}

prodsys.request = function(method, pk, payload, attrs) {
  var url =
    pk === null || pk === undefined
      ? config.api.ENDPOINT
      : config.api.ENDPOINT + pk + '/'

  if (attrs) {
    var queryString = []
    for (var key in attrs) {
      queryString.push(key + '=' + attrs[key])
    }
    url += '?' + queryString.join('&')
  }

  var request = [
    method + ' ' + url + ' HTTP/1.1',
    'Host: ' + config.api.HOST,
    'Authorization: Basic ' +
      Base64.encode(config.api.USER + ':' + config.api.PASSWORD),
    'Accept: application/json; indent=2',
    'Connection: close'
  ]

  if (payload) {
    var body = typeof payload === 'string' ? payload : jsonify(payload)
    body = toUnicode(body)
    request = request.concat([
      'Content-Type: application/json; charset=UTF-8',
      'Content-Length: ' + body.length,
      '',
      body
    ])
  }
  request.push('\n') // http requests must end with two newlines

  var response = http.connect(
    request.join('\n'),
    'utf8',
    config.api.HOST,
    config.api.PORT
  )

  if (response.body) {
    try {
      response.json = JSON.parse(response.body)
      // logToFile(response.body, 'prodsysdata.json');
    } catch (error) {
      log('error: ' + error.message)
      logToFile(response.body, 'fail.json')
      response.json = {}
      response.error = error
    }
  }
  return response
}
