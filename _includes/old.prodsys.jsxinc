// vim: set ft=javascript:
/* jshint ignore:start */
#include config.jsxinc
#include base64.jsxinc
#include json2.jsxinc
/* jshint ignore:end */

function log(message) {
  if (!config.DEBUG) return;
  $.writeln(
    typeof message === "string" ? message : JSON.stringify(message, null, 2)
  );
}

function importerSak(sak, artikkeltype) {
  // placeholder som skal erstattes med en annen funksjon i skriptet import.jsx
  try {
    var nysak = prodsys.get(sak.prodsak_id); // henter sak i prodsys
    log(sak.arbeidstittel + " " + artikkeltype.type); // skriver info til konsollen i EST
    var payload = { produsert: prodsys.gammelDeskStatus };
    prodsys.post(sak.prodsak_id, payload); // flytter saken til neste status i prodsys
  } catch (e) {
    log(e); // skriver feilmelding til konsollen
  }
}

var prodsys = {
  // Objekt om representerer produksjonssystemet på webserveren
  brukerogpassord: Base64.encode(config.api.USER + ":" + config.api.PASSWORD),
  host: config.api.HOST, // vertmaskin for prodsys
  port: 80,
  apiPlassering: config.api.TEXT, // der API-skriptet ligger
  apiPlasseringBilde: config.api.BILDE, // der API-skriptet for bilder ligger
  uferdigStatus: 0, // status i prodsys på saker som er under arbeid. Feltet heter "produsert" i prodsys-databasen
  tilDeskStatus: 3, // status i prodsys på saker som skal til desken
  gammelDeskStatus: 4, // status i prodsys på saker som er limt inn - kan være hva som helst, men produksjonssystemet skjønner ikke alt 4 = gammel desk. 9 = slett
  tilWebStatus: 6, // status på saker som er redigert til web
  slettStatus: 9 // status på gamle saker som er "slettet" fra prodsys
};

prodsys.request = function(url, method, data) {
  var httpMethod = method; // GET spør om informasjon fra prodsys
  var connection = new Socket();
  var api_url = this.apiPlassering + url + "/json/";
  var response;
  var httpRequest = "";

  // Setter sammen en httpRequest. Serveren er veldig streng på at det må være riktig formulert
  httpRequest += httpMethod + " " + api_url + " HTTP/1.0";
  httpRequest += "\rHost:" + this.host;

  if (data) {
    data = typeof data === "string" ? data : JSON.stringify(data);
    data = "json=" + toUnicode(data); // Odins skript krever en sånn json= før json-objectet.
    httpRequest +=
      "\rContent-Type: application/x-www-form-urlencoded; charset=UTF-8";
    httpRequest += "\rContent-Length: " + data.length;
  }

  httpRequest += "\rAuthorization: Basic " + this.brukerogpassord;
  httpRequest += "\rConnection: close";
  httpRequest += "\r\r";

  if (data) {
    httpRequest += data;
    httpRequest += "\r\r";
  }

  log(api_url + "\n" + method + "\n" + data + "\n" + httpRequest);

  if (connection.open(this.host + ":" + this.port)) {
    // koble til produksjonssystemet
    connection.write(httpRequest);
    var reply = connection.read(9999999); // Maks antall tegn som jeg forventer at JSON-objektet skal være.
    connection.close();
    var parts = reply.split("\n\n", 2);
    if (!/200 OK/.test(parts[0])) {
      // "200 OK" er http-kode for vellykket request
      return { error: reply };
    }
    try {
      return JSON.parse(trim(parts[1]));
    } catch (error) {
      return { error: error };
    }
  }
};

function trim(str) {
  // trim whitespace from string
  return str.replace(/^\s*/, "").replace(/\s*$/, "");
}

prodsys.get = function(prodsak_id) {
  // hvis det finnes en prodsak_id henter skriptet all data om saken fra
  // databasen. Hvis ikke finner den en array med saker som er plassert til
  // Desken.

  return this.request(prodsak_id, "GET", null);
};

prodsys.post = function(prodsak_id, data) {
  return this.request(prodsak_id, "POST", data);
};

prodsys.put = function(prodsak_id) {
  return this.request(prodsak_id, "PUT", {});
};

prodsys.bildepost = function(prodsak_id, prodbilde_id, data) {
  data = '{"bilete":[{"prodbilde_id":"' + prodbilde_id + '",' + data + "}]}";
  reply = this.post(prodsak_id, data);
  return reply;
};

function toUnicode(theString) {
  // lager unicode-entiteter av vanskelige bokstaver, tar en string og returnerer en string
  var result = ""; // skal returneres
  for (var cha = 0; cha < theString.length; cha++) {
    var theUnicode = theString.charCodeAt(cha);
    if (theUnicode === 8211) {
      // tankestrek
      result += "--"; // prodsys regner to bindestreker som tankestrek - lettere for brukerne å skrive inn
    } else if (theUnicode < 32 || theUnicode > 127) {
      // tegn og bokstover som skal være så jævla spesielle som "æøå", norske hermetegn o.s.v
      result +=
        "\\u" + ("0000" + theUnicode.toString(16).toUpperCase()).substr(-4, 4); // legger til den nye unicoden til strengen vår
    } else {
      // de vanligste tegnene (a-z, A-Z, tall og en del skilletegn)
      result += theString.charAt(cha); // legges bare til uten konvertering
    }
  }
  result = result.replace(/\\u(201C|201D)/g, "\\u0022"); // fikser feil unicode for fancy hermetegn
  result = result.replace(/\\u(2019|2018)/g, "\\u0092"); // fikser feil unicode for apostrofer
  result = result.replace(/\\u2022/g, "\\u0095"); // fikser feil unicode for bullet
  result = result.replace(/\\u2013/g, "\\u0096"); // fikser feil unicode for tankestrek
  result = result.replace(/\\u2026/g, "..."); // fikser ellipsis
  result = result.replace(/\+/g, "\\u002B"); // fikser pluss
  result = result.replace(/\&/g, "\\u0026"); // fikser &
  return result; // String
}

function fixEncoding(text) {
  text = text.replace(/\\u0085/gi, "..."); // gjør om ellipsis
  text = text.replace(/\\u0092/gi, "\\u2019"); // fikser riktig unicode for apostrofer - vet ikke hvorfor databasen bruker 0092
  text = text.replace(/\\u0095/gi, "\\u2022"); // fikser riktig unicode for bullet - vet ikke hvorfor databasen bruker 0095
  text = text.replace(/\\u00(97|96)/gi, "\\u2013"); // fikser riktig unicode for tankestrek - vet ikke hvorfor databasen bruker 0097
  text = text.replace(/\\u00(94|93)/gi, "\\u00AB"); // fikser riktig hermetegn venstre
  text = text.replace(/\b\\u00AB/gi, "\\u00BB"); // fikser  riktig hermetegn venstre høyre
  return text;
}

function fixHTMLentities(myString) {
  // Gjør om HTML-entiteter av typen &#261; om til C-type unicode av typen \u0105
  var myMatches = myString.match(/&#\d+;/g); //finner ut om stringen inneholder slike html-entiteter
  if (myMatches) {
    for (n = 0; n < myMatches.length; n += 1) {
      var myHTML = myMatches[n];
      var myUnicode = myHTML.match(/\d+/)[0];
      myUnicode = parseInt(myUnicode, 10).toString(16); //decimal til hexadecimal
      myUnicode = "\\u" + ("0000" + myUnicode.toUpperCase().substr(-4));
      myString = myString.replace(myHTML, myUnicode);
    }
  }
  return myString;
}

//main();
