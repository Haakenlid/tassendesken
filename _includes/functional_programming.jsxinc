// Ramda.js inspired functional programming utilities for extendscript

function all(seq) {
  // [a] -> bool
  for (var i = 0; i < seq.length; i++) if (!seq[i]) return false
  return true
}

function always(val) {
  // a -> (() -> a)
  if (typeof val == 'object') {
    var source = uneval(val)
    return function() {
      return eval(source)
    }
  } else
    return function() {
      return val
    }
}

function any(seq) {
  // [a] -> bool
  for (var i = 0; i < seq.length; i++) if (seq[i]) return true
  return false
}

function arrayFrom(seq) {
  // convert indesign collection specifier or other iterable to Array
  // [*] -> [*]
  if (seq instanceof Array) return seq
  // resolve collection specifier
  if (seq.hasOwnProperty('everyItem')) seq = seq.everyItem()
  if (seq.hasOwnProperty('getElements')) seq = seq.getElements()
  var rv = [],
    n = seq.length
  while (n--) rv[n] = seq[n]
  return rv
}

function ascend(fn) {
  // sorting comparator ascending
  // (a -> c) -> (a, a) -> num
  return function(a, b) {
    var A = fn(a),
      B = fn(b)
    if (A > B) return 1
    if (A == B) return 0
    return -1
  }
}

function assoc(name, val) {
  // (k, v) -> obj -> obj
  var c = {}
  c[name] = val
  return mergeRight(c)
}

function bind(fn, args) {
  // bind function arguments
  return function() {
    return fn.apply(this, args)
  }
}

function call(method) {
  // call function / method
  // k -> {k:(() -> a)} -> a
  // () -> (() -> a) -> a
  return function(obj) {
    return method ? obj[method]() : obj()
  }
}

function complement(fn) {
  // boolean invert function output
  // (* -> bool) -> (* -> bool)
  return function() {
    return !fn.apply(this, arguments)
  }
}

function compose() {
  // function composition left <- right
  // (x -> z, ... , a -> b) -> a -> z
  return pipe.apply(this, reverse(arguments))
}

function defaultTo(val0) {
  // a -> b? -> b|a
  return function(val1) {
    return val1 === undefined ? val0 : val1
  }
}

function descend(fn) {
  // sorting comparator descending
  // (a -> c) -> (a, a) -> num
  return flip(asc(fn))
}

function dotProp(name) {
  // convenience wrapper for dotted paths
  // 'k.k' -> {k:{k:v}} -> v?
  return path(name.split('.'))
}

function drop(n) {
  // drop that supports negative indexing
  // num -> [a] -> [a]
  return function(seq) {
    return n < 0 ? arrayFrom(seq).slice(0, n) : arrayFrom(seq).slice(n)
  }
}

function filter(fn) {
  // filter
  // (a -> bool) -> [a] -> [a]
  return function(seq) {
    var arr = arrayFrom(seq),
      rv = []
    for (var i = 0; i < arr.length; i++) fn(arr[i]) && rv.push(arr[i])
    return rv
  }
}

function find(fn) {
  // (a -> bool) -> [a] -> a|null
  return function(arr) {
    for (var i = 0; i < arr.length; i++) if (fn(arr[i])) return arr[i]
    return null
  }
}

function flip(fn) {
  // flip order of arguments of 2-ary function
  // ((a, b) -> c) -> ((b, a) -> c)
  return function(a, b) {
    return fn(b, a)
  }
}

function has(name) {
  // object has property `name`
  // str -> obj -> bool
  return function(obj) {
    if (isNil(obj)) return false
    if (obj instanceof Object) {
      if (obj.hasOwnProperty('isValid'))
        // is indesign dom object
        return obj.hasOwnProperty(name)
      // is javascript object
      else return obj.hasOwnProperty(name) || obj[name] !== undefined
    }
    // strings, numbers
    return obj.constructor.prototype[name] !== undefined
  }
}

function identity(val) {
  // a -> a
  return val
}

function is(type) {
  // object is instance of constructor `type`
  // type -> ob -> bool
  return function(obj) {
    // taken from ramda implementation
    return (obj != null && obj.constructor === type) || obj instanceof type
  }
}

function isNil(obj) {
  // * -> bool
  return obj === undefined || obj === null
}

function join(sep) {
  // str -> [*] -> str
  return pipe(
    arrayFrom,
    function(arr) {
      return arr.join(sep || '')
    }
  )
}

function keys(obj) {
  // object keys
  // {k:v} -> [k]
  var rv = []
  for (var key in obj) if (obj.hasOwnProperty(key)) rv.push(key)
  return rv
}

function map(fn) {
  // map
  // (a -> b) -> [a] -> [b]
  return function(seq) {
    var arr = arrayFrom(seq),
      rv = []
    for (var i = 0; i < arr.length; i++) rv.push(fn(arr[i]))
    return rv
  }
}

function merge(a) {
  // {} -> {} -> {}
  return function(b) {
    var c = {}
    for (var k in a) c[k] = a[k]
    for (var k in b) c[k] = b[k]
    return c
  }
}

function mergeRight(a) {
  // {} -> {} -> {}
  return function(b) {
    return merge(b)(a)
  }
}

function path(parts) {
  // nested prop getter
  // [k] -> {k:v} -> v?
  return pipe.apply(null, map(prop)(parts))
}

function pipe() {
  // function composition left -> right
  // (a -> b, ... , x -> z) -> a -> z
  var f0 = arguments[0]
  var fnx = Array.prototype.slice.call(arguments, 1)
  return function() {
    var val = f0.apply(this, arguments)
    for (var i = 0; i < fnx.length; i++) val = fnx[i](val)
    return val
  }
}

function pluck(name) {
  // pluck single prop
  // k -> [{k:v}] -> [v]
  return map(prop(name))
}

function prop(name) {
  // prop getter
  // k -> {k:v} -> v?
  return function(obj) {
    return has(name)(obj) ? obj[name] : undefined
  }
}

function propEq(name, value) {
  // (k, v) -> {k: v} -> bool
  return pipe(prop(name), eq(value))
}

function propOr(name, value) {
  // prop getter with default value
  // (k, v) -> {k:v} -> v
  return function(obj) {
    return has(name)(obj) ? obj[name] : value
  }
}

function reverse(seq) {
  // reverse collection. returns Array
  // [*] -> [*]
  return arrayFrom(seq).reverse()
}

function setAttr(name, val) {
  // mutating / inpure assoc
  // (k, v) -> obj -> obj
  return function(obj) {
    obj[k] = v
    return obj
  }
}

function sort(fn) {
  // sort
  // ?((a, a) -> num) -> [a] -> [a]
  return function(seq) {
    return arrayFrom(seq).sort(fn)
  }
}

function take(n) {
  // take that supports negative indexing
  // num -> [a] -> [a]
  return function(seq) {
    return n < 0 ? arrayFrom(seq).slice(n) : arrayFrom(seq).slice(0, n)
  }
}

function tap(fn) {
  // For numroducing side effects such as logging numo function pipe line
  // (a -> b) -> (* -> *) -> (a -> b)
  return function(val) {
    fn(val)
    return val
  }
}

function values(obj) {
  // object items
  // {k:v} -> [v]
  var rv = []
  for (var key in obj) if (obj.hasOwnProperty(key)) rv.push(obj[key])
  return rv
}

function when(cond, then) {
  // conditional in pipeline
  // (a -> bool, a -> b) -> a -> a|b
  return function(val) {
    return cond(val) ? then(val) : val
  }
}

function withDefault(fn, val) {
  // (* -> b?, a) -> * -> b|a
  return pipe(
    fn,
    defaultTo(val)
  )
}

function zip(collections) {
  // zip multiple input arrays / sequences
  // [[a], [b], ...] -> [[a, b, ...]]
  var arrs = map(arrayFrom)(collections)
  var length = pipe(
    pluck('length'),
    sort(),
    prop(0)
  )(arrs)
  rv = []
  for (i = 0; i < length; i++) rv.push(pluck(i)(arrs))
  return rv
}

// functional utility basics

function T() {
  // () -> bool
  return true
}

function F() {
  // () -> bool
  return false
}

// comparison operators
function eq(a) {
  // a -> a -> bool
  return function(b) {
    return uneval(a) == uneval(b)
  }
}
function neq(a) {
  // a -> a -> bool
  return function(b) {
    return uneval(a) !== uneval(b)
  }
}
function gt(a) {
  // a -> a -> bool
  return function(b) {
    return b > a
  }
}
function lt(a) {
  // a -> a -> bool
  return function(b) {
    return b < a
  }
}
function gte(a) {
  // a -> a -> bool
  return function(b) {
    return b >= a
  }
}
function lte(a) {
  // a -> a -> bool
  return function(b) {
    return b <= a
  }
}

// logical operators
function not(val) {
  // b -> bool
  return !val
}

// arithmetic operators
function add(a) {
  // num -> num -> num
  // str|* -> *|str -> str
  return function(b) {
    return b + a
  }
}
function sub(a) {
  // num -> num -> num
  return function(b) {
    return b - a
  }
}
function mul(a) {
  // num -> num -> num
  return function(b) {
    return b * a
  }
}
function div(a) {
  // num -> num -> num
  return function(b) {
    return b / a
  }
}
function mod(a) {
  // num -> num -> num
  return function(b) {
    return b % a
  }
}
function pow(a) {
  // num -> num -> num
  return function(b) {
    return Math.pow(b, a)
  }
}
// vi: ft=javascript
