#include ./index.jsxinc;
if (typeof config == 'undefined') var config = {}

// Test runner
function testRunner(raise, silent) {
  $.writeln('\n------------- ' + $.stack.split('\n')[0] + ' --------------\n')
  config.DEBUG = true
  $.level = 2 // full debug mode
  var ok = []
  var failed = []
  for (name in $.global) {
    if (/test_/.test(name)) {
      fn = $.global[name]
      if (raise) {
        fn()
        ok.push(name)
      } else {
        try {
          silent || $.write('running tests: ' + name)
          fn()
          ok.push(name)
          silent || $.write('  OK!\n')
        } catch (err) {
          $.write('running tests: ' + name)
          log('\n' + err.fileName + ':' + err.line + '\n' + err.message)
          failed.push(name)
        }
      }
    }
  }
  $.writeln('ok: ' + ok.length + '/' + (ok.length + failed.length) + ' tests')
  failed.length && $.writeln('failed:\n' + failed.join('\n'))
  $.writeln('\n------------------')
}

// Test assertions
function assert(bool, msg) {
  if (!bool) {
    throw new Error('ASSERTION ERROR: ' + (msg || 'no message'))
  }
}

function assertEqual(a, b) {
  if (eq(a)(b)) return true
  msg = 'expected ' + jsonify(b) + ' got ' + jsonify(a)
  throw new Error('ASSERTION ERROR: ' + msg)
}

function assertRaises(fn, msg) {
  try {
    fn()
  } catch (e) {
    return
  }
  $.writeln($.stack)
  throw new Error('ASSERTION ERROR: ' + (msg || 'no message'))
}

// vi: ft=javascript
