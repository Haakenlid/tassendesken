// Helper functions for logging and page element manipulation

$.clear = function() {
  $.writeln(Array(30000).join(' '))
}

function dumpData(path, data) {
  var file = new File(path)
  log('dumping: ' + file.fullName)
  file.open('w')
  file.write(JSON.stringify(data, null, 2))
  return file.close()
}

function loadData(path) {
  var file = new File(path)
  log('loading: ' + file.fullName)
  file.open('r')
  data = file.read()
  file.close()
  return JSON.parse(data)
}

function fileNameDateStamp(dt) {
  // pdf datestamp format "YYMMDD"
  var YY = dt
    .getFullYear()
    .toString()
    .slice(-2)
  var MM = zeroPad(2)(dt.getMonth() + 1)
  var DD = zeroPad(2)(dt.getDate())
  return YY + MM + DD
}

var nextWeekDay = curry(function nextWeekDay(dayNumber, dt) {
  // zero indexed day number {0:S,1:M,2:T,3:W,4:T,5:F,6:S}
  dt = dt ? new Date(dt) : new Date()
  dt.setDate(dt.getDate() + ((7 + dayNumber - dt.getDay()) % 7))
  return dt
})

var pageFileName = curry(function pageFileName(
  pubDate,
  typeNumber,
  pageNumber
) {
  // Date -> Number -> Number -> String
  var friday = nextWeekDay(5, pubDate)
  var X = typeNumber // 1 = vanlig, 2 = magasin
  var YYMMDD = fileNameDateStamp(friday)
  var PP = zeroPad(2)(pageNumber)
  return 'UNI1' + X + 'VER' + YYMMDD + PP + '000'
})

function mkdir(folder) {
  // assert that folder exists
  // works like mkdir -p and creates parent directories
  if (!folder.exists) mkdir(folder.parent)
  if (folder instanceof Folder) folder.create()
  return folder
}

function issueFolder(issueNumber) {
  // Number -> String
  return config.rotMappe + zeroPad(2)(issueNumber)
}

function ifMain(filename) {
  if (typeof filename == 'undefined')
    throw new Error('you must pass in file name `ifMain($.fileName)`')

  var topOfStack = $.stack.split('\n')[0].replace(/[\[\]\s]/g, '')
  var currentFile = filename.replace(/^.*\//, '')
  return currentFile === topOfStack
}

function zeroPad(width, fillchar) {
  // zeroPad(5)(42) -> '00042'
  var padding = Array(width + 1).join(fillchar || '0')
  return function(n) {
    var digits = '' + n
    return digits.length < width ? (padding + digits).slice(-width) : digits
  }
}

function titleCase(str) {
  // str -> str
  return str[0].toUpperCase() + str.substr(1).toLowerCase()
}

function currentIssue(root) {
  // Finner kommende currentIssue av avisa ved å lete etter mappe med høyest tall.
  for (var i = 50; i > 0; i--) if (Folder(path + zeroPad(2)(i)).exists) return i
  throw new Error('could not find folder')
}

function nextFriday() {
  var dt = new Date()
  dt.setDate(dt.getDate() + (5 - dt.getDay()))
  var year = dt
    .getFullYear()
    .toString()
    .slice(-2)
  var month = zeroPad(2)(dt.getMonth())
  var day = zeroPad(2)(dt.getDate())
  return year + month + day
}

function backupFile(file) {
  // create a date stamped backup of the input file
  var today = JSON.stringify(new Date()).substr(1, 10)
  var backupDir = new Folder(file.path + '/BACKUP/')
  backupDir.exists || backupDir.create()
  var backupFile = new File(file.path + '/BACKUP/' + today + '.' + file.name)
  file.copy(backupFile)
  return backupFile
}

// Image -> Number
function getImageSize(image) {
  var bounds = image.parent.geometricBounds
  return (bounds[2] - bounds[0]) * (bounds[3] - bounds[1])
}

// Image | Story -> String
function getLabel(item, key) {
  // get scripting label for indesign dom element
  var label, value, match
  if (item instanceof Image) item = item.parent
  if (item instanceof Story) item = item.textContainers[0]
  if (item instanceof String) label = item
  else label = item.label
  value = label.replace(/^ */, '').replace(/ *$/, '')
  if (key) {
    try {
      value = JSON.parse(value)[key]
    } catch (e) {
      match = value.match(RegExp(key + ':[ "]*([^ "]+)'))
      value = match && match[1]
    }
  }
  value = parseInt(value) || value
  return value
}

// (Image | Story, String | Object) -> void
function setLabel(item, label) {
  // set scripting label for indesign dom element
  if (typeof label !== 'string') label = jsonify(label)
  if (item instanceof Story) item = item.textContainers[0]
  if (item instanceof Image) item = item.parent
  if ('label' in item) item.label = label
  else throw new Error('unknown type ' + typeof item)
}

// String -> String
function trim(str) {
  // trim whitespace from string
  return str.replace(/^\s*/, '').replace(/\s*$/, '')
}

// String -> String
function toUnicode(theString) {
  // lager unicode-entiteter av vanskelige bokstaver, tar en string og returnerer en string
  function charToUnicode(letter) {
    var charCode = (
      '0000' +
      letter
        .charCodeAt(0)
        .toString(16)
        .toUpperCase()
    ).substr(-4, 4)
    return '\\u' + charCode
  }
  var result = theString
  result = result.replace(/[\u0080-\uFFFF]/g, charToUnicode)
  result = result.replace(/\\u(201C|201D)/g, '\\u0022') // fikser feil unicode for fancy hermetegn
  result = result.replace(/\\u(2019|2018)/g, '\\u0092') // fikser feil unicode for apostrofer
  result = result.replace(/\\u2022/g, '\\u0095') // fikser feil unicode for bullet
  result = result.replace(/\\u2013/g, '\\u0096') // fikser feil unicode for tankestrek
  result = result.replace(/\\u2026/g, '...') // fikser ellipsis
  result = result.replace(/\+/g, '\\u002B') // fikser pluss
  result = result.replace(/\&/g, '\\u0026') // fikser &
  return result // String
}

// Object -> Object
function serializeObject(obj) {
  // make object serializable
  if (typeof uneval === 'undefined') var uneval = String
  if (obj === undefined || obj === null) return null
  switch (obj.constructor.name) {
    case 'String':
    case 'Number':
    case 'Boolean':
      return obj
    case 'Object':
    case 'Error':
      var newObj = {}
      for (var key in obj) newObj[key] = serializeObject(obj[key])
      return newObj
    case 'Array':
      var newArr = []
      for (var i = 0; i < obj.length; i++) newArr[i] = serializeObject(obj[i])
      return newArr
    case 'Story':
      return (
        '[[ ' +
        obj.toSpecifier() +
        ' | ' +
        obj.contents.substr(0, 50) +
        ' (' +
        obj.lines.length +
        ' lines)' +
        ' ]]'
      )
    case 'Image':
      return '[[ ' + obj.toSpecifier() + ' | ' + obj.itemLink.name + ' ]]'
    case 'Function':
      return '[[object Function | ' + obj.name + ' ]]'
    default:
      return '[' + obj + ']'
  }
}

// Object -> String
function jsonify(obj, indent) {
  // jsonify any object, including errors and indesign native objects
  if (typeof indent == 'undefined') indent == config.DEBUG ? 2 : 0
  return JSON.stringify(serializeObject(obj), null, indent)
}

// (String | Object, ?String) -> void
function logToFile(message, filename) {
  // log message to file
  if (!filename) filename = 'default.log'
  var fp = File(config.logfiles + filename)
  fp.open('w')
  fp.encoding = 'UTF-8'
  fp.lineFeed = 'Unix'
  if (typeof message !== 'string') {
    message = jsonify(message, 2)
  }
  var successful = fp.write(message)
  fp.close()
  return successful
}

// log error object to file
function logError(error, data, logfile) {
  var datestamp = JSON.stringify(new Date())
    .slice(1, 20)
    .replace(/\W+/g, '-')
  var scriptfile = error.fileName
    .split('/')
    .slice(-2)
    .join('.')
  var filename = logfile || ['ERROR', datestamp, scriptfile, 'json'].join('.')
  var msg = {
    message: error.message,
    line: error.line,
    file: scriptfile,
    time: datestamp,
    data: data
  }
  log(jsonify(msg, 2), filename)
  return filename
}

// try to call function. Log errors to file
function tryLogErrors(fn, rethrow) {
  return function() {
    var args = arguments
    try {
      return fn.apply(null, args)
    } catch (error) {
      var data = { functionName: fn.name, arguments: args, stacktrace: $.stack }
      var filename = logError(error, data)
      var msg = [
        'Noe gikk galt med ',
        error.fileName,
        '\n',
        'Feilmeldingen blir lagret her: ',
        filename
      ].join('')
      if (!config.DEBUG) alert(msg, 'Feil')
      if (rethrow) throw error
    }
  }
}

// (String | Object, ?String) -> void
function log(message, filename) {
  if (config.DEBUG || filename == '$' || filename == $) {
    if (typeof message !== 'string') message = jsonify(message, 2)
    // log to extendscript console
    $.writeln(message)
  } else if (filename) logToFile(message, filename)
}

// Object -> [String]
function objectKeys(obj) {
  var result = []
  for (key in obj) result.push(key)
  return result
}

function pp(obj) {
  return pipe(
    when(
      has('properties'),
      pipe(
        prop('properties'),
        map(uneval),
        reject(eq('({})')),
        map(replace(/^resolve/, '')),
        map(eval),
        filter(identity)
      )
    ),
    flip(jsonify)(2),
    flip(log)($)
  )(obj)
}

// Debugging decorator for functions
// Function -> Function
function timeIt(fn) {
  return function() {
    var t0 = new Date()
    var args = arrayFrom(arguments)
    var retval = fn.apply(this, args)
    var time = new Date() - t0
    var msg = 'time: ' + fn.name + '(' + args + ') ' + time + 'ms'
    $.writeln(msg)
    return retval
  }
}
// vi: ft=javascript
