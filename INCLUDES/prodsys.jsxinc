// TODO: importer config
#include config.jsxinc
#include base64.jsxinc
function importerSak(sak, artikkeltype) { // placeholder som skal erstattes med en annen funksjon i skriptet import.jsx
  try {
    var nysak = prodsys.get(sak.prodsak_id); // henter sak i prodsys
    $.writeln(sak.arbeidstittel + " " + artikkeltype.type); // skriver info til konsollen i EST
    prodsys.post(sak.prodsak_id, '{"produsert":'+prodsys.gammelDeskStatus+'}'); // flytter saken til neste status i prodsys
  } catch (e) {
    $.writeln(e); // skriver feilmelding til konsollen
  }
}

function main(){
    var sak = prodsys.get(897);
    a = 1+1;
    $.write(sak); 
}


var prodsys = { // Objekt om representerer produksjonssystemet på webserveren
  brukerogpassord: Base64.encode(config.api.USER+':'+config.api.PASSWORD),
  host: config.api.HOST, // vertmaskin for prodsys 
  port: 80, 
  apiPlassering: config.api.TEXT, // der API-skriptet ligger 
  apiPlasseringBilde: config.api.BILDE, // der API-skriptet for bilder ligger
  uferdigStatus: 0, // status i prodsys på saker som er under arbeid. Feltet heter "produsert" i prodsys-databasen
  tilDeskStatus: 3, // status i prodsys på saker som skal til desken 
  gammelDeskStatus: 4, // status i prodsys på saker som er limt inn - kan være hva som helst, men produksjonssystemet skjønner ikke alt 4 = gammel desk. 9 = slett
  tilWebStatus: 6, // status på saker som er redigert til web
  slettStatus: 9, // status på gamle saker som er "slettet" fra prodsys   
};

prodsys.get = function(prodsak_id) { // hvis det finnes en prodsak_id henter skriptet all data om saken fra databasen. Hvis ikke finner den en array med saker som er plassert til Desken.
  var httpMethod = "GET"; // GET spør om informasjon fra prodsys
  var connection = new Socket();
  var skriptloc = this.apiPlassering;
  var svar;
  var resultat;
  var httpRequest;
  if (prodsak_id) { // om skriptet skal hente en bestemt sak
    skriptloc += prodsak_id + "/json/";
  } else { // om skriptet skal finne alle saker med produsert = 3 eller 0
    skriptloc += "json/";
  }

  // Setter sammen en httpRequest. Serveren er veldig streng på at det må være riktig formulert
  httpRequest = httpMethod + " " + skriptloc + " HTTP/1.0";
  httpRequest += "\rHost:" + this.host;
  httpRequest += "\rAuthorization: Basic " + this.brukerogpassord;
  httpRequest += "\r\r";

  if (connection.open(this.host+':'+this.port)) { // koble til produksjonssystemet
    connection.write(httpRequest);
    svar = connection.read(999999); // Maks antall tegn som jeg forventer at JSON-objektet skal være. 
    if (!/200 OK/.test(svar)) { // "200 OK" er http-kode for vellykket request
      throw ("HTTP error!\n" + svar + "\n\n---------------------\n\n" + httpRequest);
    }
    if (!/{.*}/.test(svar)) { // Hvis det ikke sendes noen JSON-objekt 
      throw ("Prodsys error!(saken finnes ikke)\n" + svar + "\n\n---------------------\n\n" + httpRequest);
    }
    svar = svar.replace(/[^@]*text\/html/, ""); // fjerner http-header
    // Endringer som må gjøres på grunn av Windows-1252 encoding som brukes i prodsys-databasen.
    svar = svar.replace(/\\u0085/gi, "..."); // gjør om ellipsis
    svar = svar.replace(/\\u0092/gi, "\\u2019"); // fikser riktig unicode for apostrofer - vet ikke hvorfor databasen bruker 0092
    svar = svar.replace(/\\u0095/gi, "\\u2022"); // fikser riktig unicode for bullet - vet ikke hvorfor databasen bruker 0095
    svar = svar.replace(/\\u00(97|96)/gi, "\\u2013"); // fikser riktig unicode for tankestrek - vet ikke hvorfor databasen bruker 0097
    svar = svar.replace(/\\u00(94|93)/gi, "\\u00AB"); // fikser riktig hermetegn venstre
    svar = svar.replace(/\b\\u00AB/gi, "\\u00BB"); // fikser  riktig hermetegn venstre høyre
    svar = fixHTMLentities(svar); // fikser gjenstridige HTML-entiteter;
    connection.close();
    resultat = eval("(" + svar + ")"); // eval regnes som trygt når avsenderen er snill. Men det _kan_ være en potensiell bakdør for slemme hackere. 
    // TODO: bytt ut med skikkelig JSON parser.
  }
  return resultat;
};

prodsys.post = function(prodsak_id, json) {
  var httpMethod = "POST"; // POST oppdaterer en sak i prodsys..
  if (json == "PUT") {
    httpMethod = "PUT";
    json = "{}";
  }
  var connection = new Socket();
  var svar;
  var skriptloc = this.apiPlassering + prodsak_id + "/json/";
  var resultat;
  var httpRequest;
  json = "json=" + toUnicode(json); // Odins skript krever en sånn json= før json-objectet. 

  // Setter sammen en httpRequest. Serveren er veldig streng på at det må være riktig formulert
  httpRequest = httpMethod + " " + skriptloc + " HTTP/1.0";
  httpRequest += "\rHost: " + this.host;
  httpRequest += "\rContent-Type: application/x-www-form-urlencoded; charset=UTF-8";
  httpRequest += "\rContent-Length: " + json.length;
  httpRequest += "\rAuthorization: Basic " + this.brukerogpassord;
  httpRequest += "\rConnection: close";
  httpRequest += "\r\r";
  httpRequest += json;
  httpRequest += "\r\r";

  if (connection.open(this.host)) { // koble til produksjonssystemet
    connection.encoding = "UTF-8";
    connection.write(httpRequest);
    svar = connection.read(999999);
    connection.close();
    if (!/200 OK/.test(svar)) { // "200 OK" er http-kode for vellykket request
      throw ("HTTP error!\n" + svar + "\n\n---------------------\n\n" + httpRequest);
    }
    if (/"status":false/.test(svar)) { // "false" er en feilmelding fra prodsys-APIen
      // throw("Prodsys error!\n"+svar+"\n\n---------------------\n\n"+httpRequest);
    }
  }
  return (httpRequest + "\n\n--------------\n\n" + svar);
};

prodsys.put = function(prodsak_id) {
  var httpMethod = "PUT"; // PUT brukes når man skal lage en ny versjon av en sak i prodsys.
  var connection = new Socket();
  var svar;
  var skriptloc = this.apiPlassering + prodsak_id + "/json/";
  var resultat;
  var httpRequest;
  json = 'json="{}"';
  httpRequest = httpMethod + " " + skriptloc + " HTTP/1.0";
  httpRequest += "\rHost: " + this.host;
  httpRequest += "\rContent-Type: application/x-www-form-urlencoded; charset=UTF-8";
  httpRequest += "\rAuthorization: Basic " + this.brukerogpassord;
  httpRequest += "\rConnection: close";
  httpRequest += "\r\r";
  httpRequest += json;
  httpRequest += "\r\r";
  if (connection.open(this.host)) { // koble til produksjonssystemet
    connection.encoding = "UTF-8";
    connection.write(httpRequest);
    svar = connection.read(99999);
    connection.close();
    if (!/200 OK/.test(svar)) { // "200 OK" er http-kode for vellykket request
      throw ("HTTP error!\n" + svar + "\n\n---------------------\n\n" + httpRequest);
    }
    if (/"status":false/.test(svar)) { // "false" er en feilmelding fra prodsys-APIen
      // throw("Prodsys error!\n"+svar+"\n\n---------------------\n\n"+httpRequest);
    }

  }
  return (httpRequest + "\n\n--------------\n\n" + svar);
};

prodsys.bildepost = function(prodsak_id, json) {
  var httpMethod = "POST"; // POST oppdaterer en sak i prodsys..
  if (json == "PUT") {
    httpMethod = "PUT";
    json = "{}";
  }
  var connection = new Socket();
  var svar;
  var skriptloc = this.apiPlasseringBilde + prodsak_id + "/json/";
  var resultat;
  var httpRequest;
  json = "json=" + toUnicode(json); // Odins skript krever en sånn json= før json-objectet. 

  // Setter sammen en httpRequest. Serveren er veldig streng på at det må være riktig formulert
  httpRequest = httpMethod + " " + skriptloc + " HTTP/1.0";
  httpRequest += "\rHost: " + this.host;
  httpRequest += "\rContent-Type: application/x-www-form-urlencoded; charset=UTF-8";
  httpRequest += "\rContent-Length: " + json.length;
  httpRequest += "\rAuthorization: Basic " + this.brukerogpassord;
  httpRequest += "\rConnection: close";
  httpRequest += "\r\r";
  httpRequest += json;
  httpRequest += "\r\r";

  if (connection.open(this.host)) { // koble til produksjonssystemet
    connection.encoding = "UTF-8";
    connection.write(httpRequest);
    svar = connection.read(999999);
    connection.close();
    if (!/200 OK/.test(svar)) { // "200 OK" er http-kode for vellykket request
      throw ("HTTP error!\n" + svar + "\n\n---------------------\n\n" + httpRequest);
    }
    if (/"status":false/.test(svar)) { // "false" er en feilmelding fra prodsys-APIen
      // throw("Prodsys error!\n"+svar+"\n\n---------------------\n\n"+httpRequest);
    }
  }
  return (httpRequest + "\n\n--------------\n\n" + svar);
};

function toUnicode(theString) { // lager unicode-entiteter av vanskelige bokstaver, tar en string og returnerer en string
  var result = ''; // skal returneres
  for (var cha = 0; cha < theString.length; cha++) {
    var theUnicode = theString.charCodeAt(cha);
    if (theUnicode === 8211) { // tankestrek
      result += '--'; // prodsys regner to bindestreker som tankestrek - lettere for brukerne å skrive inn
    } else if (theUnicode < 32 || theUnicode > 127) { // tegn og bokstover som skal være så jævla spesielle som "æøå", norske hermetegn o.s.v
      result += "\\u" + ("0000" + theUnicode.toString(16).toUpperCase()).substr(-4, 4); // legger til den nye unicoden til strengen vår
    } else { // de vanligste tegnene (a-z, A-Z, tall og en del skilletegn) 
      result += theString.charAt(cha); // legges bare til uten konvertering
    }
  }
  result = result.replace(/\\u(201C|201D)/g, "\\u0022"); // fikser feil unicode for fancy hermetegn 
  result = result.replace(/\\u(2019|2018)/g, "\\u0092"); // fikser feil unicode for apostrofer 
  result = result.replace(/\\u2022/g, "\\u0095"); // fikser feil unicode for bullet 
  result = result.replace(/\\u2013/g, "\\u0096"); // fikser feil unicode for tankestrek 
  result = result.replace(/\\u2026/g, "..."); // fikser ellipsis
  result = result.replace(/\+/g, "\\u002B"); // fikser pluss
  result = result.replace(/\&/g, "\\u0026"); // fikser &
  return result; // String
}

function fixHTMLentities(myString) { // Gjør om HTML-entiteter av typen &#261; om til C-type unicode av typen \u0105
  var myMatches = myString.match(/&#\d+;/g); //finner ut om stringen inneholder slike html-entiteter
  if (myMatches) {
    for (n = 0; n < myMatches.length; n += 1) {
      var myHTML = myMatches[n];
      var myUnicode = myHTML.match(/\d+/)[0];
      myUnicode = parseInt(myUnicode, 10).toString(16); //decimal til hexadecimal
      myUnicode = "\\u"+("0000"+myUnicode.toUpperCase().substr(-4));
      myString = myString.replace(myHTML, myUnicode);
    }
  }
  return myString;
}


main();
