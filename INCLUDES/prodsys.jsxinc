// TODO: importer configfunction importerSak(sak, artikkeltype) { // placeholder som skal erstattes med en annen funksjon i skriptet import.jsx  try {    var nysak = prodsys.get(sak.prodsak_id); // henter sak i prodsys    $.writeln(sak.arbeidstittel + " " + artikkeltype.type); // skriver info til konsollen i EST    prodsys.post(sak.prodsak_id, '{"produsert":4}'); // flytter saken til neste status i prodsys  } catch (e) {    $.writeln(e); // skriver feilmelding til konsollen  }}var prodsys = { // Objekt om representerer produksjonssystemet på webserveren  brukerogpassord: config.api.BASE64, // TODO: importer dette  host: config.api.HOST, // vertmaskin for prodsys   apiPlassering: config.api.API_PATH_TEXT, // der API-skriptet ligger   apiPlasseringBilde: config.api.BILDE, // der API-skriptet for bilder ligger  uferdigStatus: 0, // status i prodsys på saker som er under arbeid. Feltet heter "produsert" i prodsys-databasen  tilDeskStatus: 3, // status i prodsys på saker som skal til desken   gammelDeskStatus: 4, // status i prodsys på saker som er limt inn - kan være hva som helst, men produksjonssystemet skjønner ikke alt 4 = gammel desk. 9 = slett  tilWebStatus: 6, // status på saker som er redigert til web  slettStatus: 9, // status på gamle saker som er "slettet" fra prodsys   };prodsys.get = function(prodsak_id) { // hvis det finnes en prodsak_id henter skriptet all data om saken fra databasen. Hvis ikke finner den en array med saker som er plassert til Desken.  var httpMethod = "GET"; // GET spør om informasjon fra prodsys  var connection = new Socket();  var skriptloc = this.apiPlassering;  var svar;  var resultat;  var httpRequest;  if (prodsak_id) { // om skriptet skal hente en bestemt sak    skriptloc += prodsak_id + "/json/";  } else { // om skriptet skal finne alle saker med produsert = 3 eller 0    skriptloc += "json/";  }  // Setter sammen en httpRequest. Serveren er veldig streng på at det må være riktig formulert  httpRequest = httpMethod + " " + skriptloc + " HTTP/1.0";  httpRequest += "\rHost:" + this.host;  httpRequest += "\rAuthorization: Basic " + this.brukerogpassord;  httpRequest += "\r\r";  if (connection.open(this.host)) { // koble til produksjonssystemet    connection.write(httpRequest);    svar = connection.read(999999); // Maks antall tegn som jeg forventer at JSON-objektet skal være.     if (!/200 OK/.test(svar)) { // "200 OK" er http-kode for vellykket request      throw ("HTTP error!\n" + svar + "\n\n---------------------\n\n" + httpRequest);    }    if (!/{.*}/.test(svar)) { // Hvis det ikke sendes noen JSON-objekt       throw ("Prodsys error!(saken finnes ikke)\n" + svar + "\n\n---------------------\n\n" + httpRequest);    }    svar = svar.replace(/[^@]*text\/html/, ""); // fjerner http-header    // Endringer som må gjøres på grunn av Windows-1252 encoding som brukes i prodsys-databasen.    svar = svar.replace(/\\u0085/gi, "..."); // gjør om ellipsis    svar = svar.replace(/\\u0092/gi, "\\u2019"); // fikser riktig unicode for apostrofer - vet ikke hvorfor databasen bruker 0092    svar = svar.replace(/\\u0095/gi, "\\u2022"); // fikser riktig unicode for bullet - vet ikke hvorfor databasen bruker 0095    svar = svar.replace(/\\u00(97|96)/gi, "\\u2013"); // fikser riktig unicode for tankestrek - vet ikke hvorfor databasen bruker 0097    svar = svar.replace(/\\u00(94|93)/gi, "\\u00AB"); // fikser riktig hermetegn venstre    svar = svar.replace(/\b\\u00AB/gi, "\\u00BB"); // fikser  riktig hermetegn venstre høyre    svar = fixHTMLentities(svar); // fikser gjenstridige HTML-entiteter;    connection.close();    resultat = eval("(" + svar + ")"); // eval regnes som trygt når avsenderen er snill. Men det _kan_ være en potensiell bakdør for slemme hackere.     // TODO: bytt ut med skikkelig JSON parser.  }  return resultat;};prodsys.post = function(prodsak_id, json) {  var httpMethod = "POST"; // POST oppdaterer en sak i prodsys..  if (json == "PUT") {    httpMethod = "PUT";    json = "{}";  }  var connection = new Socket();  var svar;  var skriptloc = this.apiPlassering + prodsak_id + "/json/";  var resultat;  var httpRequest;  json = "json=" + toUnicode(json); // Odins skript krever en sånn json= før json-objectet.   // Setter sammen en httpRequest. Serveren er veldig streng på at det må være riktig formulert  httpRequest = httpMethod + " " + skriptloc + " HTTP/1.0";  httpRequest += "\rHost: " + this.host;  httpRequest += "\rContent-Type: application/x-www-form-urlencoded; charset=UTF-8";  httpRequest += "\rContent-Length: " + json.length;  httpRequest += "\rAuthorization: Basic " + this.brukerogpassord;  httpRequest += "\rConnection: close";  httpRequest += "\r\r";  httpRequest += json;  httpRequest += "\r\r";  if (connection.open(this.host)) { // koble til produksjonssystemet    connection.encoding = "UTF-8";    connection.write(httpRequest);    svar = connection.read(999999);    connection.close();    if (!/200 OK/.test(svar)) { // "200 OK" er http-kode for vellykket request      throw ("HTTP error!\n" + svar + "\n\n---------------------\n\n" + httpRequest);    }    if (/"status":false/.test(svar)) { // "false" er en feilmelding fra prodsys-APIen      // throw("Prodsys error!\n"+svar+"\n\n---------------------\n\n"+httpRequest);    }  }  return (httpRequest + "\n\n--------------\n\n" + svar);};prodsys.put = function(prodsak_id) {  var httpMethod = "PUT"; // PUT brukes når man skal lage en ny versjon av en sak i prodsys.  var connection = new Socket();  var svar;  var skriptloc = this.apiPlassering + prodsak_id + "/json/";  var resultat;  var httpRequest;  json = 'json="{}"';  httpRequest = httpMethod + " " + skriptloc + " HTTP/1.0";  httpRequest += "\rHost: " + this.host;  httpRequest += "\rContent-Type: application/x-www-form-urlencoded; charset=UTF-8";  httpRequest += "\rAuthorization: Basic " + this.brukerogpassord;  httpRequest += "\rConnection: close";  httpRequest += "\r\r";  httpRequest += json;  httpRequest += "\r\r";  if (connection.open(this.host)) { // koble til produksjonssystemet    connection.encoding = "UTF-8";    connection.write(httpRequest);    svar = connection.read(99999);    connection.close();    if (!/200 OK/.test(svar)) { // "200 OK" er http-kode for vellykket request      throw ("HTTP error!\n" + svar + "\n\n---------------------\n\n" + httpRequest);    }    if (/"status":false/.test(svar)) { // "false" er en feilmelding fra prodsys-APIen      // throw("Prodsys error!\n"+svar+"\n\n---------------------\n\n"+httpRequest);    }  }  return (httpRequest + "\n\n--------------\n\n" + svar);};prodsys.bildepost = function(prodsak_id, json) {  var httpMethod = "POST"; // POST oppdaterer en sak i prodsys..  if (json == "PUT") {    httpMethod = "PUT";    json = "{}";  }  var connection = new Socket();  var svar;  var skriptloc = this.apiPlasseringBilde + prodsak_id + "/json/";  var resultat;  var httpRequest;  json = "json=" + toUnicode(json); // Odins skript krever en sånn json= før json-objectet.   // Setter sammen en httpRequest. Serveren er veldig streng på at det må være riktig formulert  httpRequest = httpMethod + " " + skriptloc + " HTTP/1.0";  httpRequest += "\rHost: " + this.host;  httpRequest += "\rContent-Type: application/x-www-form-urlencoded; charset=UTF-8";  httpRequest += "\rContent-Length: " + json.length;  httpRequest += "\rAuthorization: Basic " + this.brukerogpassord;  httpRequest += "\rConnection: close";  httpRequest += "\r\r";  httpRequest += json;  httpRequest += "\r\r";  if (connection.open(this.host)) { // koble til produksjonssystemet    connection.encoding = "UTF-8";    connection.write(httpRequest);    svar = connection.read(999999);    connection.close();    if (!/200 OK/.test(svar)) { // "200 OK" er http-kode for vellykket request      throw ("HTTP error!\n" + svar + "\n\n---------------------\n\n" + httpRequest);    }    if (/"status":false/.test(svar)) { // "false" er en feilmelding fra prodsys-APIen      // throw("Prodsys error!\n"+svar+"\n\n---------------------\n\n"+httpRequest);    }  }  return (httpRequest + "\n\n--------------\n\n" + svar);};function toUnicode(theString) { // lager unicode-entiteter av vanskelige bokstaver, tar en string og returnerer en string  var result = ''; // skal returneres  for (var cha = 0; cha < theString.length; cha++) {    var theUnicode = theString.charCodeAt(cha);    if (theUnicode === 8211) { // tankestrek      result += '--'; // prodsys regner to bindestreker som tankestrek - lettere for brukerne å skrive inn    } else if (theUnicode < 32 || theUnicode > 127) { // tegn og bokstover som skal være så jævla spesielle som "æøå", norske hermetegn o.s.v      result += "\\u" + ("0000" + theUnicode.toString(16).toUpperCase()).substr(-4, 4); // legger til den nye unicoden til strengen vår    } else { // de vanligste tegnene (a-z, A-Z, tall og en del skilletegn)       result += theString.charAt(cha); // legges bare til uten konvertering    }  }  result = result.replace(/\\u(201C|201D)/g, "\\u0022"); // fikser feil unicode for fancy hermetegn   result = result.replace(/\\u(2019|2018)/g, "\\u0092"); // fikser feil unicode for apostrofer   result = result.replace(/\\u2022/g, "\\u0095"); // fikser feil unicode for bullet   result = result.replace(/\\u2013/g, "\\u0096"); // fikser feil unicode for tankestrek   result = result.replace(/\\u2026/g, "..."); // fikser ellipsis  result = result.replace(/\+/g, "\\u002B"); // fikser pluss  result = result.replace(/\&/g, "\\u0026"); // fikser &  return result; // String}function fixHTMLentities(myString) { // Gjør om HTML-entiteter av typen &#261; om til C-type unicode av typen \u0105  var myMatches = myString.match(/&#\d+;/g); //finner ut om stringen inneholder slike html-entiteter  if (myMatches) {    for (n = 0; n < myMatches.length; n += 1) {      var myHTML = myMatches[n];      var myUnicode = myHTML.match(/\d+/)[0];      myUnicode = parseInt(myUnicode, 10).toString(16); //decimal til hexadecimal      myUnicode = "\\u"+("0000"+myUnicode.toUpperCase().substr(-4));      myString = myString.replace(myHTML, myUnicode);    }  }  return myString;}var Base64 = {  // http://stackoverflow.com/a/6740027/1977847  // private property  _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",  // public method for encoding  encode: function(input) {    var output = "";    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;    var i = 0;    input = Base64._utf8_encode(input);    while (i < input.length) {      chr1 = input.charCodeAt(i++);      chr2 = input.charCodeAt(i++);      chr3 = input.charCodeAt(i++);      enc1 = chr1 >> 2;      enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);      enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);      enc4 = chr3 & 63;      if (isNaN(chr2)) {        enc3 = enc4 = 64;      } else if (isNaN(chr3)) {        enc4 = 64;      }      output = output +        Base64._keyStr.charAt(enc1) + Base64._keyStr.charAt(enc2) +        Base64._keyStr.charAt(enc3) + Base64._keyStr.charAt(enc4);    }    return output;  },  // public method for decoding  decode: function(input) {    var output = "";    var chr1, chr2, chr3;    var enc1, enc2, enc3, enc4;    var i = 0;    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");    while (i < input.length) {      enc1 = Base64._keyStr.indexOf(input.charAt(i++));      enc2 = Base64._keyStr.indexOf(input.charAt(i++));      enc3 = Base64._keyStr.indexOf(input.charAt(i++));      enc4 = Base64._keyStr.indexOf(input.charAt(i++));      chr1 = (enc1 << 2) | (enc2 >> 4);      chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);      chr3 = ((enc3 & 3) << 6) | enc4;      output = output + String.fromCharCode(chr1);      if (enc3 != 64) {        output = output + String.fromCharCode(chr2);      }      if (enc4 != 64) {        output = output + String.fromCharCode(chr3);      }    }    output = Base64._utf8_decode(output);    return output;  },  // private method for UTF-8 encoding  _utf8_encode: function(string) {    string = string.replace(/\r\n/g, "\n");    var utftext = "";    for (var n = 0; n < string.length; n++) {      var c = string.charCodeAt(n);      if (c < 128) {        utftext += String.fromCharCode(c);      } else if ((c > 127) && (c < 2048)) {        utftext += String.fromCharCode((c >> 6) | 192);        utftext += String.fromCharCode((c & 63) | 128);      } else {        utftext += String.fromCharCode((c >> 12) | 224);        utftext += String.fromCharCode(((c >> 6) & 63) | 128);        utftext += String.fromCharCode((c & 63) | 128);      }    }    return utftext;  },  // private method for UTF-8 decoding  _utf8_decode: function(utftext) {    var string = "";    var i = 0, c = 0, c1 = 0, c2 = 0;    while (i < utftext.length) {      c = utftext.charCodeAt(i);      if (c < 128) {        string += String.fromCharCode(c);        i++;      } else if ((c > 191) && (c < 224)) {        c2 = utftext.charCodeAt(i + 1);        string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));        i += 2;      } else {        c2 = utftext.charCodeAt(i + 1);        c3 = utftext.charCodeAt(i + 2);        string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));        i += 3;      }    }    return string;  }};